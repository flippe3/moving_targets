{"ast":null,"code":"var _jsxFileName = \"/home/chad/snake-game/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport AppleLogo from './assets/applePixels.png';\nimport useInterval from './hooks/useInterval';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst canvasX = 300;\nconst canvasY = 450;\nconst initialSnake = [[4, 5], [4, 6]];\nconst initialApple = [14, 10];\nconst scale = 50;\nconst timeDelay = 100;\nconst questions = [\"Hur glad har du känt dig de senaste 7 dagarna?\", \"Hur ofta har du känt dig motiverad i skolan de senaste 7 dagarna?\", \"Jag upplever att mina lärare har varit stödjande de senaste 7 dagarna.\", \"Jag upplever att mina klasskamrater har varit stödjande de senaste 7 dagarna\", \"Jag är nöjd med min insats i skolan de senaste 7 dagarna.\", \"Jag har upplevt en hög arbetsbelastning och stress de senaste 7 dagarna.\", \"Hur ofta har du mått dåligt de senaste 7 dagarna?\", \"Hur ofta har du upplevt oro de senaste 7 dagarna?\"];\nconst answers = [\"Inte Alls\", \"Lite\", \"Mellan\", \"Mycket\", \"Väldigt Mycket\"];\n\nconst App = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(initialSnake);\n  const [apple, setApple] = useState(initialApple);\n  const [direction, setDirection] = useState([0, -1]);\n  const [delay, setDelay] = useState(null);\n  const [score, setScore] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(questions[0]);\n  useInterval(() => runGame(), delay);\n  useEffect(() => {\n    let fruit = document.getElementById('fruit');\n\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {// ctx.setTransform(scale, 0, 0, scale, 0, 0);\n        // ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n        // ctx.fillStyle = '#a3d001';\n        // snake.forEach(([x, y]) => ctx.fillRect(x, y, 1, 1));\n        // ctx.drawImage(fruit, apple[0], apple[1], 1, 1);\n      }\n    }\n  }, [snake, apple]);\n\n  function handleSetScore() {\n    if (score > Number(localStorage.getItem('snakeScore'))) {\n      localStorage.setItem('snakeScore', JSON.stringify(score));\n    }\n  }\n\n  function setQuestion(number) {\n    //localStorage.setItem('question', questions[number]);\n    setCurrentQuestion(questions[number]);\n  }\n\n  function createAnswers() {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        console.log(window.innerWidth, window.innerHeight); // ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n\n        ctx.fillStyle = '#FF0000';\n        let width = 80;\n        let height = 30;\n\n        for (let i = 0; i < 5; i++) {\n          let x = canvasX / 2 - width / 2;\n          let y = 20 + i * 70;\n          ctx.fillRect(canvasX / 2 - width / 2, 20 + i * 70, width, height);\n          ctx.fillText(answers[i], x, y + height / 2);\n        }\n      }\n    }\n  }\n\n  function play() {\n    // setSnake(initialSnake);\n    // setApple(initialApple);\n    // setDirection([1, 0]);\n    setDelay(timeDelay);\n    setCurrentQuestion(questions[0]); // setScore(0);\n\n    createAnswers();\n  }\n\n  function checkCollision(head) {\n    // for (let i = 0; i < snake.length; i++) {\n    //   if (head[i] < 0 || head[i] * scale >= canvasX) {\n    //   }\n    //   return true;\n    // }\n    // // for (const s of snake) {\n    //   if (head[0] === s[0] && head[1] === s[1]) return true;\n    // }\n    return false;\n  }\n\n  function appleAte(newSnake) {\n    let coord = apple.map(() => Math.floor(Math.random() * canvasX / scale));\n\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = coord;\n      setScore(score + 1);\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  }\n\n  function runGame() {\n    console.log('RUNNING GAME'); // const newSnake = [...snake];\n    // const newSnakeHead = [\n    //   newSnake[0][0] + direction[0],\n    //   newSnake[0][1] + direction[1],\n    // ];\n    // newSnake.unshift(newSnakeHead);\n    // if (checkCollision(newSnakeHead)) {\n    //   setDelay(null);\n    //   handleSetScore();\n    // }\n    // if (!appleAte(newSnake)) {\n    //   newSnake.pop();\n    // }\n    // setSnake(newSnake);\n\n    createAnswers();\n  }\n\n  function changeDirection(e) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        setDirection([-1, 0]);\n        break;\n\n      case 'ArrowUp':\n        setDirection([0, -1]);\n        break;\n\n      case 'ArrowRight':\n        setDirection([1, 0]);\n        break;\n\n      case 'ArrowDown':\n        setDirection([0, 1]);\n        break;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onKeyDown: e => changeDirection(e),\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"fruit\",\n      src: AppleLogo,\n      alt: \"fruit\",\n      width: \"30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"playArea\",\n      ref: canvasRef,\n      width: `${canvasX}px`,\n      height: `${canvasY}px`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: play,\n      className: \"playButton\",\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"High Score: \", localStorage.getItem('snakeScore')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"dJ2+eReE1G34WdDs/tQeNqyFq38=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","AppleLogo","useInterval","canvasX","canvasY","initialSnake","initialApple","scale","timeDelay","questions","answers","App","canvasRef","snake","setSnake","apple","setApple","direction","setDirection","delay","setDelay","score","setScore","currentQuestion","setCurrentQuestion","runGame","fruit","document","getElementById","current","canvas","ctx","getContext","handleSetScore","Number","localStorage","getItem","setItem","JSON","stringify","setQuestion","number","createAnswers","setTransform","console","log","window","innerWidth","innerHeight","fillStyle","width","height","i","x","y","fillRect","fillText","play","checkCollision","head","appleAte","newSnake","coord","map","Math","floor","random","newApple","changeDirection","e","key"],"sources":["/home/chad/snake-game/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport AppleLogo from './assets/applePixels.png';\nimport Monitor from './assets/black.jpeg';\nimport useInterval from './hooks/useInterval';\nimport logo from './assets/logo.svg'\nimport { create } from 'domain';\n\nconst canvasX = 300;\nconst canvasY = 450;\nconst initialSnake = [\n  [4, 5],\n  [4, 6],\n];\nconst initialApple = [14, 10];\nconst scale = 50;\nconst timeDelay = 100;\nconst questions = [\"Hur glad har du känt dig de senaste 7 dagarna?\", \n\"Hur ofta har du känt dig motiverad i skolan de senaste 7 dagarna?\", \n\"Jag upplever att mina lärare har varit stödjande de senaste 7 dagarna.\",\n\"Jag upplever att mina klasskamrater har varit stödjande de senaste 7 dagarna\", \n\"Jag är nöjd med min insats i skolan de senaste 7 dagarna.\", \n\"Jag har upplevt en hög arbetsbelastning och stress de senaste 7 dagarna.\", \"Hur ofta har du mått dåligt de senaste 7 dagarna?\", \n\"Hur ofta har du upplevt oro de senaste 7 dagarna?\"];\n\nconst answers = [\"Inte Alls\", \"Lite\", \"Mellan\", \"Mycket\", \"Väldigt Mycket\"];\n\nconst App = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [snake, setSnake] = useState(initialSnake);\n  const [apple, setApple] = useState(initialApple);\n  const [direction, setDirection] = useState([0, -1]);\n  const [delay, setDelay] = useState<number | null>(null);\n  const [score, setScore] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(questions[0]);\n\n  useInterval(() => runGame(), delay);\n\n  useEffect(() => {\n    let fruit = document.getElementById('fruit') as HTMLCanvasElement;\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        // ctx.setTransform(scale, 0, 0, scale, 0, 0);\n        // ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n        // ctx.fillStyle = '#a3d001';\n        // snake.forEach(([x, y]) => ctx.fillRect(x, y, 1, 1));\n        // ctx.drawImage(fruit, apple[0], apple[1], 1, 1);\n      }\n    }\n  }, [snake, apple]);\n\n  function handleSetScore() {\n    if (score > Number(localStorage.getItem('snakeScore'))) {\n      localStorage.setItem('snakeScore', JSON.stringify(score));\n    }\n  }\n\n  function setQuestion(number: number) {\n    //localStorage.setItem('question', questions[number]);\n    setCurrentQuestion(questions[number]);\n  }\n\n  function createAnswers() {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.setTransform(1, 0, 0,1 , 0, 0);\n        console.log(window.innerWidth, window.innerHeight);\n        // ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n        ctx.fillStyle = '#FF0000';\n\n        let width = 80;\n        let height = 30;\n        for (let i = 0; i < 5; i++) {\n          let x = canvasX / 2 - width / 2;\n          let y = 20 + (i * 70);\n          ctx.fillRect(canvasX / 2 - width / 2, 20 + (i * 70), width, height);\n          ctx.fillText(answers[i], x, y + height / 2);\n        }\n      }\n    }\n  }\n\n  function play() {\n    // setSnake(initialSnake);\n    // setApple(initialApple);\n    // setDirection([1, 0]);\n    setDelay(timeDelay);\n    setCurrentQuestion(questions[0]);\n    // setScore(0);\n    createAnswers();\n  }\n  function checkCollision(head: number[]) {\n    // for (let i = 0; i < snake.length; i++) {\n    //   if (head[i] < 0 || head[i] * scale >= canvasX) {\n    //   }\n    //   return true;\n    // }\n    // // for (const s of snake) {\n    //   if (head[0] === s[0] && head[1] === s[1]) return true;\n    // }\n    return false;\n  }\n  function appleAte(newSnake: number[][]) {\n    let coord = apple.map(() => Math.floor((Math.random() * canvasX) / scale));\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = coord;\n      setScore(score + 1);\n      setApple(newApple);\n      return true;\n    }\n    return false;\n  }\n\n  function runGame() {\n    console.log('RUNNING GAME');\n    // const newSnake = [...snake];\n    // const newSnakeHead = [\n    //   newSnake[0][0] + direction[0],\n    //   newSnake[0][1] + direction[1],\n    // ];\n    // newSnake.unshift(newSnakeHead);\n    // if (checkCollision(newSnakeHead)) {\n    //   setDelay(null);\n    //   handleSetScore();\n    // }\n    // if (!appleAte(newSnake)) {\n    //   newSnake.pop();\n    // }\n    // setSnake(newSnake);\n    createAnswers();\n  }\n  function changeDirection(e: React.KeyboardEvent<HTMLDivElement>) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        setDirection([-1, 0]);\n        break;\n      case 'ArrowUp':\n        setDirection([0, -1]);\n        break;\n      case 'ArrowRight':\n        setDirection([1, 0]);\n        break;\n      case 'ArrowDown':\n        setDirection([0, 1]);\n        break;\n    }\n  }\n\n  return (\n    <div onKeyDown={e => changeDirection(e)}>\n      <h2>{currentQuestion}</h2>\n      <img id=\"fruit\" src={AppleLogo} alt=\"fruit\" width=\"30\" />\n      <canvas\n        className=\"playArea\"\n        ref={canvasRef}\n        width={`${canvasX}px`}\n        height={`${canvasY}px`}\n      />\n      <button onClick={play} className=\"playButton\">\n        Play\n      </button>\n      <div className=\"scoreBox\">\n        <h2>Score: {score}</h2>\n        <h2>High Score: {localStorage.getItem('snakeScore')}</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}