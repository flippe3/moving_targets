[{"/home/chad/snake-game/src/index.tsx":"1","/home/chad/snake-game/src/App.tsx":"2","/home/chad/snake-game/src/hooks/useInterval.tsx":"3"},{"size":251,"mtime":1665397597472,"results":"4","hashOfConfig":"5"},{"size":11095,"mtime":1665652854135,"results":"6","hashOfConfig":"5"},{"size":550,"mtime":1665397597472,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o9xxkq",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/chad/snake-game/src/index.tsx",[],[],"/home/chad/snake-game/src/App.tsx",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport AppleLogo from './assets/applePixels.png';\nimport Monitor from './assets/black.jpeg';\nimport answer0 from './assets/answer0.png';\nimport answer1 from './assets/answer1.png';\nimport answer2 from './assets/answer2.png';\nimport answer3 from './assets/answer3.png';\nimport answer4 from './assets/answer4.png';\nimport answer0_correct from './assets/answer0_1.png';\nimport answer1_correct from './assets/answer1_1.png';\nimport answer2_correct from './assets/answer2_1.png';\nimport answer3_correct from './assets/answer3_1.png';\nimport answer4_correct from './assets/answer4_1.png';\nimport ball from './assets/ball.png';\nimport finished from './assets/finished.png';\n\n\nimport useInterval from './hooks/useInterval';\nimport logo from './assets/logo.svg'\nimport { create } from 'domain';\n\n\nconst canvasX = 350;\nconst canvasY = 480;\nconst initialSnake = [\n  [4, 5],\n  [4, 6],\n];\nconst initialApple = [14, 10];\nconst scale = 50;\nconst timeDelay = 10;\nconst questions = [\"Hur glad har du känt dig de senaste 7 dagarna?\", \n\"Hur ofta har du känt dig motiverad i skolan de senaste 7 dagarna?\", \n\"Jag upplever att mina lärare har varit stödjande de senaste 7 dagarna.\",\n\"Jag upplever att mina klasskamrater har varit stödjande de senaste 7 dagarna\", \n\"Jag är nöjd med min insats i skolan de senaste 7 dagarna.\", \n\"Jag har upplevt en hög arbetsbelastning och stress de senaste 7 dagarna.\", \"Hur ofta har du mått dåligt de senaste 7 dagarna?\", \n\"Hur ofta har du upplevt oro de senaste 7 dagarna?\"];\n\nconst directions = [1, 1, 1, 1, 1];\nlet answersOrder = [0,1,2,3,4];\nlet speeds = [0.6,1,2,1.2,1.7];\n\nconst rectWidth = 100\nconst rectHeight = 40\n\nlet selectedAnswer = -1;\nlet gameIsLive = false;\nlet moveBall = false;\nlet ballRotation = 0;\nlet ballSpeed = 6;\nlet isWonned = false;\n\nlet answerPos = [[canvasX / 2 - rectWidth / 2, 5],\n                   [canvasX / 2 - rectWidth / 2, 15 + rectHeight],\n                   [canvasX / 2 - rectWidth / 2, 25 + 2 * rectHeight],\n                   [canvasX / 2 - rectWidth / 2, 35 + 3 * rectHeight],\n                   [canvasX / 2 - rectWidth / 2, 45 + 4 * rectHeight]];\n\nconst copyAnswerPos = [[canvasX / 2 - rectWidth / 2, 5],\n[canvasX / 2 - rectWidth / 2, 15 + rectHeight],\n[canvasX / 2 - rectWidth / 2, 25 + 2 * rectHeight],\n[canvasX / 2 - rectWidth / 2, 35 + 3 * rectHeight],\n[canvasX / 2 - rectWidth / 2, 45 + 4 * rectHeight]];\n\nlet ballPos = [canvasX / 2, canvasY - 40];\nconst ballRadius = 10;\nlet ballDelta = [0, 0];\nlet currQuestion = 0;\nlet currentQuestion = questions[currQuestion];\n\nconst App = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [delay, setDelay] = useState<number | null>(null);\n  let [currentQuestion, setCurrentQuestion] = useState(questions[currQuestion]);\n\n  useInterval(() => play(), 0)\n  useInterval(() => runGame(), delay);\n\n  function setDPI() {\n    // Set up CSS size.\n    let dpi = 500;\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        canvas.style.width = canvas.style.width || canvas.width + 'px';\n        canvas.style.height = canvas.style.height || canvas.height + 'px';\n\n        // Get size information.\n        var scaleFactor = dpi / 96;\n        var width = parseFloat(canvas.style.width);\n        var height = parseFloat(canvas.style.height);\n\n        // Backup the canvas contents.\n        var oldScale = canvas.width / width;\n        var backupScale = scaleFactor / oldScale;\n        // var backup = canvas.cloneNode(false);\n        // backup.getContext('2d').drawImage(canvas, 0, 0);\n\n        // Resize the canvas.\n        var ctXX = canvas.getContext('2d');\n        canvas.width = Math.ceil(width * scaleFactor);\n        canvas.height = Math.ceil(height * scaleFactor);\n\n        // Redraw the canvas image and scale future draws.\n        ctx.setTransform(backupScale, 0, 0, backupScale, 0, 0);\n        // ctx.drawImage(backup, 0, 0);\n        ctx.setTransform(scaleFactor, 0, 0, scaleFactor, 0, 0);\n      }\n    }\n  }\n\n  function setQuestion(number: number) {\n    setCurrentQuestion(questions[number]);\n  }\n\n  function createAnswers() {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (ctx && !isWonned) {\n        ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n        for (let i = 0; i < 5; i++) {\n          if (selectedAnswer == answersOrder[i]){\n            let answer = document.getElementById('answer'+answersOrder[i]+'_correct') as HTMLCanvasElement;\n            ctx.drawImage(answer,  answerPos[i][0], answerPos[i][1], rectWidth, rectHeight); \n          } else {\n            let answer = document.getElementById('answer'+answersOrder[i]) as HTMLCanvasElement;\n            ctx.drawImage(answer,  answerPos[i][0], answerPos[i][1], rectWidth, rectHeight); \n          }\n        }\n        if (gameIsLive) {\n          // Creates the ball\n          let ball = document.getElementById('ball') as HTMLCanvasElement;\n          ctx.drawImage(ball,  ballPos[0] - ballRadius, ballPos[1], 2*ballRadius, 2*ballRadius); \n        }\n      }\n    }\n  }\n  \n  function randomizeAnswers() {\n    answerPos.forEach(element => {\n      element[0] = 5 + Math.floor(Math.random() * (canvasX - rectWidth - 10));\n    });\n    answersOrder = answersOrder.sort((a, b) => 0.5 - Math.random());\n    \n    speeds = speeds.sort((a, b) => 0.5 - Math.random());\n\n    directions.forEach(element => {\n      let rand = Math.round(Math.random());\n      if (rand == 0) {\n        element = -1;\n      } else {\n        element = 1;\n      }\n    });\n  }\n  function moveQuestion() {\n    for (let i = 0; i < 5; i++) {\n      if (answerPos[i][0] + rectWidth >= canvasX) {\n        directions[i] *= -1;\n      } else if (answerPos[i][0] <= 0) {\n        directions[i] *= -1;\n      }\n      answerPos[i][0] += directions[i] * speeds[i];\n    }\n  }\n\n  function play() {\n    setDPI();\n    setDelay(timeDelay);\n    createAnswers();\n  }\n\n  function drawWin() {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        let finished = document.getElementById('finished') as HTMLCanvasElement;\n        ctx.drawImage(finished, 50 , 50, 200, 200);  \n      }\n    }\n  }\n\n\n  function movesBall() {\n    if (ballPos[0] - ballRadius <= 0 || ballPos[0] + ballRadius >= canvasX) {\n      ballDelta[0] *= -1;\n    }\n    if (ballPos[1] <= 0 || ballPos[1] + 2 * ballRadius >= canvasY) {\n      ballDelta[1] *= -1;\n    }\n    for (let i = 0; i < 5; i++) {\n      if ((ballPos[0] - ballRadius <= answerPos[i][0] + rectWidth && ballPos[0] + ballRadius >= answerPos[i][0]) && (ballPos[1] <= answerPos[i][1] + rectHeight && ballPos[1] + 2*ballRadius >= answerPos[i][1])) { \n        if (answersOrder[i] == selectedAnswer) {\n          currQuestion += 1;\n          if (currQuestion > 7){\n            alert('You won!');\n            isWonned = true;\n          } else {\n            setQuestion(currQuestion);\n            ballDelta = [0, 0];\n            ballPos = [canvasX / 2, canvasY - 40];\n            answersOrder = [0,1,2,3,4];\n            selectedAnswer = -1;\n            for (let i = 0; i < 5; i++) {\n              answerPos[i][0] = copyAnswerPos[i][0];\n            }\n            moveBall = false;\n            gameIsLive = false;\n          }\n        } else {\n          ballDelta = [0, 0];\n          ballPos = [canvasX / 2, canvasY - 40];\n          moveBall = false;\n        }\n      } \n    }\n    ballPos[0] += ballDelta[0] * ballSpeed;\n    ballPos[1] -= ballDelta[1] * ballSpeed; \n  }\n\n  function runGame() {\n    if (!isWonned){\n      if (gameIsLive) {\n        moveQuestion();\n        if (moveBall) {\n          movesBall();\n        }\n      }\n      createAnswers();\n    } \n  }\n\n  function handleMouseInput(x: any, y: any) {\n    if (!gameIsLive) {\n      for (let i = 0; i < 5; i++) {\n        if (x >= answerPos[i][0] && x <= answerPos[i][0] + rectWidth && y >= answerPos[i][1] && y <= answerPos[i][1] + rectHeight) {\n          selectedAnswer = i;\n          randomizeAnswers();\n          gameIsLive = true;\n          return;\n        }\n      }\n    }\n    else if (gameIsLive && !moveBall) {\n      // if (x >= ballPos[0] && x <= ballPos[1] + ballRadius && y >= ballPos[1] && ballPos[1] + ballRadius) {\n      //   console.log(\"Pressed Ball\");\n      //   //moveBall = true;   \n      // }\n      let deltax = x - ballPos[0];\n      let deltay = ballPos[1] - y;\n      if (deltax >= 0 && deltay >= 0) {\n        let angle = Math.atan(deltay/deltax);\n        ballDelta = [((Math.PI/2) - angle)/(Math.PI/2), angle/(Math.PI/2)];\n        console.log(\"x speed %: \", ((Math.PI/2) - angle)/(Math.PI/2), \"y speed %: \", angle/(Math.PI/2))\n      } else if (deltax < 0 && deltay >= 0) {\n        let angle = Math.atan(-deltax/deltay);\n        ballDelta = [-angle/(Math.PI/2), ((Math.PI/2) - angle)/(Math.PI/2)];\n        console.log(\"x speed %: \", -angle/(Math.PI/2), \"y speed %: \", ((Math.PI/2) - angle)/(Math.PI/2))\n      } else if (deltax >= 0 && deltay < 0) {\n        let angle = Math.atan(-deltay/deltax);\n        ballDelta = [((Math.PI/2) - angle)/(Math.PI/2), -angle/(Math.PI/2)];\n        console.log(\"x speed %: \", ((Math.PI/2) - angle)/(Math.PI/2), \"y speed %: \", -angle/(Math.PI/2))\n      } else {\n        let angle = Math.atan(deltax/deltay);\n        ballDelta = [-angle/(Math.PI/2), -((Math.PI/2) - angle)/(Math.PI/2)];\n        console.log(\"x speed %: \", -angle/(Math.PI/2), \"y speed %: \", -((Math.PI/2) - angle)/(Math.PI/2))\n      }\n      moveBall = true;\n    }\n  }\n  return (\n    <div>\n      <div id=\"question\">\n        <h4>{currentQuestion}</h4>\n      </div>\n      <img id=\"answer0\" src={answer0} alt=\"answer\" width=\"30\" />\n      <img id=\"answer1\" src={answer1} alt=\"answer\" width=\"30\" />\n      <img id=\"answer2\" src={answer2} alt=\"answer\" width=\"30\" />\n      <img id=\"answer3\" src={answer3} alt=\"answer\" width=\"30\" />\n      <img id=\"answer4\" src={answer4} alt=\"answer\" width=\"30\" />\n      <img id=\"answer0_correct\" src={answer0_correct} alt=\"answer\" width=\"30\" />\n      <img id=\"answer1_correct\" src={answer1_correct} alt=\"answer\" width=\"30\" />\n      <img id=\"answer2_correct\" src={answer2_correct} alt=\"answer\" width=\"30\" />\n      <img id=\"answer3_correct\" src={answer3_correct} alt=\"answer\" width=\"30\" />\n      <img id=\"answer4_correct\" src={answer4_correct} alt=\"answer\" width=\"30\" />\n      <img id=\"ball\" src={ball} alt=\"ball\" width=\"30\" />\n      <img id=\"finished\" src={finished} alt=\"finished\" width=\"30\" />\n      <canvas\n        className=\"playArea\"\n        id=\"canvas\"\n        onClick={function (e) {\n          var elem = document.getElementById('canvas');\n          if (elem) {\n            var elemLeft = elem.offsetLeft + elem.clientLeft;\n            var elemTop = elem.offsetTop + elem.clientTop;  \n            handleMouseInput(e.clientX - elemLeft, e.clientY - elemTop);\n          }\n        }}\n        ref={canvasRef}\n        width={`${canvasX}px`}\n        height={`${canvasY}px`}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","/home/chad/snake-game/src/hooks/useInterval.tsx",[],[],{"ruleId":"33","severity":1,"message":"34","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":26},{"ruleId":"33","severity":1,"message":"37","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":17},{"ruleId":"33","severity":1,"message":"38","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":15},{"ruleId":"33","severity":1,"message":"39","line":20,"column":8,"nodeType":"35","messageId":"36","endLine":20,"endColumn":12},{"ruleId":"33","severity":1,"message":"40","line":21,"column":10,"nodeType":"35","messageId":"36","endLine":21,"endColumn":16},{"ruleId":"33","severity":1,"message":"41","line":26,"column":7,"nodeType":"35","messageId":"36","endLine":26,"endColumn":19},{"ruleId":"33","severity":1,"message":"42","line":30,"column":7,"nodeType":"35","messageId":"36","endLine":30,"endColumn":19},{"ruleId":"33","severity":1,"message":"43","line":31,"column":7,"nodeType":"35","messageId":"36","endLine":31,"endColumn":12},{"ruleId":"33","severity":1,"message":"44","line":51,"column":5,"nodeType":"35","messageId":"36","endLine":51,"endColumn":17},{"ruleId":"33","severity":1,"message":"45","line":71,"column":5,"nodeType":"35","messageId":"36","endLine":71,"endColumn":20},{"ruleId":"33","severity":1,"message":"46","line":103,"column":13,"nodeType":"35","messageId":"36","endLine":103,"endColumn":17},{"ruleId":"47","severity":1,"message":"48","line":126,"column":30,"nodeType":"49","messageId":"50","endLine":126,"endColumn":32},{"ruleId":"47","severity":1,"message":"48","line":153,"column":16,"nodeType":"49","messageId":"50","endLine":153,"endColumn":18},{"ruleId":"33","severity":1,"message":"51","line":177,"column":12,"nodeType":"35","messageId":"36","endLine":177,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":198,"column":29,"nodeType":"49","messageId":"50","endLine":198,"endColumn":31},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AppleLogo' is defined but never used.","'Monitor' is defined but never used.","'logo' is defined but never used.","'create' is defined but never used.","'initialSnake' is assigned a value but never used.","'initialApple' is assigned a value but never used.","'scale' is assigned a value but never used.","'ballRotation' is assigned a value but never used.","'currentQuestion' is assigned a value but never used.","'ctXX' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'drawWin' is defined but never used."]